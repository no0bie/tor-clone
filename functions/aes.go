// Module to handle all of the encryption

package main

import (
	"encoding/binary"
	"fmt"
	"math/big"
)

var (
	sbox = [256]byte{
		0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
	}

	inv_sbox = [256]byte{
		0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
		0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
		0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
		0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
		0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
		0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
		0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
		0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
		0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
		0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
		0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
		0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
		0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
		0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
		0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
		0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
	}

	rcon = [10]uint32{
		0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000,
	}
)

// Generate the 128-bit key, if the secret is less than 128-bit add padding, if its bigger trim it
func gen_key(secret big.Int) []byte {
	secret_bytes := []byte(secret.String())

	key := []byte{}

	if len(secret_bytes) < 16 {
		key = append(key, secret_bytes...)
		key = append(key, make([]byte, 16-len((secret_bytes)))...)
	} else {
		key = []byte(secret.String())[:16]
	}
	return key
}

// Padding for our block so its always 128-bit
func pad(in []byte, blockLen int) []byte {
	tmp := make([]byte, len(in))
	copy(tmp, in)

	rmd := len(tmp) % blockLen
	for i := 0; i < blockLen-rmd; i++ {
		tmp = append(tmp, byte(blockLen-rmd))
	}
	return tmp
}

// Remove the addedd padding in our block
func unpad(in []byte) []byte {
	last := int(in[len(in)-1])
	tmp := make([]byte, len(in)-last)
	copy(tmp, in[:len(in)-last])
	return tmp
}

// https://www.brainkart.com/article/AES-Key-Expansion_8410/
func gen_round_keys(key []byte) []uint32 {
	w := []uint32{}

	for i := 0; i < 4; i++ {
		w = append(w, binary.LittleEndian.Uint32(key[4*i:4*i+4]))
	}

	for i := 4; i < 44; i++ {
		temp := make([]byte, 4)
		binary.LittleEndian.PutUint32(temp, w[i-1])
		if i%4 == 0 {
			RotWord(temp)
			SubBytes(temp)
			bytes_rcon := make([]byte, 4)
			binary.LittleEndian.PutUint32(bytes_rcon, rcon[i/4-1])
			byte_xor(temp, bytes_rcon)
		}
		w = append(w, w[i-4]^binary.LittleEndian.Uint32(temp))
	}

	return w
}

// Encrypt data that has been received with AES algorithm
func encrypt(secret big.Int, msg []byte) []byte {
	key := gen_key(secret)
	round_keys := gen_round_keys(key)
	msg = pad(msg, 16)

	for i := 0; i < len(msg); i += 16 {
		encrypt_block(msg[i:i+16], round_keys)
	}
	return msg
}

func encrypt_block(state []byte, round_keys []uint32) {
	AddRoundKey(state, round_keys[0:4])
	for round := 1; round < 10; round++ {
		SubBytes(state)
		ShiftRows(state)
		MixColumns(state)
		AddRoundKey(state, round_keys[4*round:4*round+4])
	}
	SubBytes(state)
	ShiftRows(state)
	AddRoundKey(state, round_keys[40:44])
}

// Decrypt data that has been sent with AES algorithm
func decrypt(secret big.Int, encrypted []byte) []byte {
	key := gen_key(secret)
	round_keys := gen_round_keys(key)

	for i := 0; i < len(encrypted); i += 16 {
		decrypt_block(encrypted[i:i+16], round_keys)
	}

	encrypted = unpad(encrypted)
	return encrypted
}

func decrypt_block(state []byte, round_keys []uint32) {
	AddRoundKey(state, round_keys[40:44])
	for round := 9; round > 0; round-- {
		InvShiftRows(state)
		InvSubBytes(state)
		AddRoundKey(state, round_keys[4*round:4*round+4])
		InvMixColumns(state)
	}
	InvShiftRows(state)
	InvSubBytes(state)
	AddRoundKey(state, round_keys[0:4])
}

// === UTILITIES ===

func SubBytes(state []byte) {
	for i, v := range state {
		state[i] = sbox[v]
	}
}

func InvSubBytes(state []byte) {
	for i, v := range state {
		state[i] = inv_sbox[v]
	}
}

func RotWord(in []byte) {
	in[0], in[1], in[2], in[3] = in[1], in[2], in[3], in[0]
}

func ShiftRows(state []byte) {
	for i, n := range []int{1, 2, 3} {
		state[i], state[i+4*1], state[i+4*2], state[i+4*3] = state[i+4*(n%4)], state[i+4*((n+1)%4)], state[i+4*((n+2)%4)], state[i+4*((n+3)%4)]
	}
}

func InvShiftRows(state []byte) {
	for i, n := range []int{3, 2, 1} {
		state[i], state[i+4*1], state[i+4*2], state[i+4*3] = state[i+4*(n%4)], state[i+4*((n+1)%4)], state[i+4*((n+2)%4)], state[i+4*((n+3)%4)]
	}
}

// 0x1b = x^4 + x^3 + x + 1 which is the part we take the modulo
// Multiply byte that is coming in by x^p
func xtimes(a_n byte, n int) byte {
	for n > 0 {
		a_n = ((a_n << 1) ^ (((a_n >> 7) & 1) * 0x1b))
		n--
	}
	return a_n
}

// Performing galois multiplication between a_n and c_n
// By performing theses simple steps we are turning c_n into a polynomial
// Then we are multiplying a by x^n to get the polynomial
// Finally we multiply the c_n polynomial by a_n polynomial and performing addition in GF
func galois_multiplication(a_n byte, c_n byte) byte {
	return (((c_n >> 0) & 0x01) * xtimes(a_n, 0)) ^
		(((c_n >> 1) & 0x01) * xtimes(a_n, 1)) ^
		(((c_n >> 2) & 0x01) * xtimes(a_n, 2)) ^
		(((c_n >> 3) & 0x01) * xtimes(a_n, 3)) ^
		(((c_n >> 4) & 0x01) * xtimes(a_n, 4)) ^
		(((c_n >> 5) & 0x01) * xtimes(a_n, 5)) ^
		(((c_n >> 6) & 0x01) * xtimes(a_n, 6)) ^
		(((c_n >> 7) & 0x01) * xtimes(a_n, 7))
}

// If we perform the matrix multiplication of c(x) and a(x) in GF(2^8) we get
// b0 = a0*c3 XOR a1*c0 XOR a2*c1 XOR a3*c2
// b1 = a0*c2 XOR a1*c3 XOR a2*c0 XOR a3*c1
// b2 = a0*c1 XOR a1*c2 XOR a2*c3 XOR a3*c0
// b3 = a0*c0 XOR a1*c1 XOR a2*c2 XOR a3*c3
// This is exactly what we are doing here
func matrix_multiplication(b []byte, c []byte) {
	a := make([]byte, 4)
	copy(a, b)

	b[0] = galois_multiplication(a[0], c[3]) ^ galois_multiplication(a[1], c[0]) ^ galois_multiplication(a[2], c[1]) ^ galois_multiplication(a[3], c[2])
	b[1] = galois_multiplication(a[0], c[2]) ^ galois_multiplication(a[1], c[3]) ^ galois_multiplication(a[2], c[0]) ^ galois_multiplication(a[3], c[1])
	b[2] = galois_multiplication(a[0], c[1]) ^ galois_multiplication(a[1], c[2]) ^ galois_multiplication(a[2], c[3]) ^ galois_multiplication(a[3], c[0])
	b[3] = galois_multiplication(a[0], c[0]) ^ galois_multiplication(a[1], c[1]) ^ galois_multiplication(a[2], c[2]) ^ galois_multiplication(a[3], c[3])
}

func MixColumns(state []byte) {
	c_x := []byte{0x03, 0x01, 0x01, 0x02}
	for i := 0; i < len(state); i += 4 {
		matrix_multiplication(state[i:i+4], c_x)
	}
}

func InvMixColumns(state []byte) {
	c_x := []byte{0x0b, 0x0d, 0x09, 0x0e}
	for i := 0; i < len(state); i += 4 {
		matrix_multiplication(state[i:i+4], c_x)
	}
}

func AddRoundKey(state []byte, w []uint32) {
	tmp := make([]byte, 16)

	for i := 0; i < len(w); i += 1 {
		binary.LittleEndian.PutUint32(tmp[4*i:4*i+4], w[i])
	}
	byte_xor(state, tmp)
}

func byte_xor(x []byte, y []byte) {
	if len(x) <= len(y) {
		for i := 0; i < len(x); i++ {
			x[i] = x[i] ^ y[i]
		}
	} else {
		fmt.Println("Error: Can't XOR")
	}
}
